<?php
namespace gamboamartin\administrador\models;

use base\orm\_modelo_parent;
use base\orm\_modelo_parent_sin_codigo;
use config\generales;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class adm_menu extends _modelo_parent_sin_codigo {
    public function __construct(PDO $link, array $childrens = array()){
        $tabla = 'adm_menu';
        $columnas = array($tabla=>false);
        $campos_obligatorios = array('etiqueta_label');
        $childrens['adm_seccion'] ="gamboamartin\administrador\models";

        $columnas_extra['adm_menu_n_secciones'] = /** @lang sql */
            "(SELECT COUNT(*) FROM adm_seccion WHERE adm_seccion.adm_menu_id = adm_menu.id)";

        parent::__construct(link: $link,tabla:  $tabla,campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, childrens: $childrens);
        $this->NAMESPACE = __NAMESPACE__;
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        if(!isset($this->registro['etiqueta_label'])){
            $etiqueta_label = $this->registro['descripcion'];
            $etiqueta_label = str_replace('_', ' ', $etiqueta_label);
            $etiqueta_label = ucwords($etiqueta_label);
            $this->registro['etiqueta_label'] = $etiqueta_label;
        }
        if(!isset($this->registro['icono'])){
            $icono = 'SI';
            $this->registro['icono'] = $icono;
        }
        if(!isset($this->registro['titulo'])){
            $titulo = $this->registro['descripcion'];
            $titulo = str_replace('_', ' ', $titulo);
            $titulo = ucwords('_', $titulo);
            $this->registro['titulo'] = $titulo;
        }


        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta adm_menu',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    public function menus_visibles_permitidos(){

        $menus = (new _base_accion())->menus_visibles_permitidos(link:$this->link, table: $this->tabla);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener menus',data:  $menus);
        }


        return $menus;

    }

    public function menus_visibles_permitidos_full(){

        $adm_menus = (new _base_accion())->menus_visibles_permitidos(link:$this->link, table: $this->tabla);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener menus',data:  $adm_menus);
        }

        $adm_menus = (new _base_accion())->asigna_secciones_a_menu(adm_menus: $adm_menus,link:  $this->link);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener menus',data:  $adm_menus);
        }
        $sistema_en_ejecucion = (new generales())->sistema;

        $adm_menus_out = array();
        foreach ($adm_menus as $adm_menu){
            $secciones = $adm_menu['adm_secciones'];

            foreach ($secciones as $adm_seccion){
                $adm_seccion_id = $adm_seccion['adm_seccion_id'];
                $filtro['adm_seccion.id'] = $adm_seccion_id;
                $filtro['adm_sistema.descripcion'] = $sistema_en_ejecucion;
                $existe = (new adm_seccion_pertenece(link: $this->link))->existe(filtro: $filtro);
                if(errores::$error){
                    return $this->error->error(mensaje: 'Error al validar  si existe',data:  $existe);
                }
                if($existe){
                    $existe_adm_menu_out = false;
                    foreach ($adm_menus_out as $adm_menu_aut){
                        if((int)$adm_menu_aut['adm_menu_id'] === (int)$adm_menu['adm_menu_id']){
                            $existe_adm_menu_out = true;
                        }
                    }
                    if(!$existe_adm_menu_out){
                        $adm_menu_puro = $adm_menu;
                        unset($adm_menu_puro['adm_secciones']);
                        $adm_menus_out[] = $adm_menu_puro;
                    }
                    foreach ($adm_menus_out as $key=>$adm_menu_aut){
                        if((int)$adm_menu_aut['adm_menu_id'] === (int)$adm_menu['adm_menu_id']){
                            $adm_menus_out[$key]['adm_secciones'][] = $adm_seccion;
                        }
                    }



                }

            }

        }

        //print_r($adm_menus);exit;

        return $adm_menus_out;

    }

    /**
     * Obtiene las secciones de un menu
     * @param int $adm_menu_id Menu identificador
     * @return array
     * @version 0.545.51
     */
    public function secciones(int $adm_menu_id): array
    {
        if($adm_menu_id <= 0){
            return $this->error->error(mensaje: 'Error adm_menu_id debe ser mayor a 0',data:  $adm_menu_id);
        }
        $filtro['adm_menu.id'] = $adm_menu_id;
        $r_adm_seccion = (new adm_seccion($this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener secciones',data:  $r_adm_seccion);
        }
        return $r_adm_seccion->registros;
    }


}