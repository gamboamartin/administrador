<?php
namespace gamboamartin\administrador\models;

use base\orm\_modelo_parent;
use base\orm\_modelo_parent_sin_codigo;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class adm_menu extends _modelo_parent_sin_codigo {
    public function __construct(PDO $link, array $childrens = array()){
        $tabla = 'adm_menu';
        $columnas = array($tabla=>false);
        $campos_obligatorios = array('etiqueta_label');
        $childrens['adm_seccion'] ="gamboamartin\administrador\models";

        $columnas_extra['adm_menu_n_secciones'] = /** @lang sql */
            "(SELECT COUNT(*) FROM adm_seccion WHERE adm_seccion.adm_menu_id = adm_menu.id)";

        parent::__construct(link: $link,tabla:  $tabla,campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, childrens: $childrens);
        $this->NAMESPACE = __NAMESPACE__;
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        if(!isset($this->registro['etiqueta_label'])){
            $etiqueta_label = $this->registro['descripcion'];
            $etiqueta_label = str_replace('_', ' ', $etiqueta_label);
            $etiqueta_label = ucwords($etiqueta_label);
            $this->registro['etiqueta_label'] = $etiqueta_label;
        }
        if(!isset($this->registro['icono'])){
            $icono = 'SI';
            $this->registro['icono'] = $icono;
        }
        if(!isset($this->registro['titulo'])){
            $titulo = $this->registro['descripcion'];
            $titulo = str_replace('_', ' ', $titulo);
            $titulo = ucwords('_', $titulo);
            $this->registro['titulo'] = $titulo;
        }


        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta adm_menu',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    public function menus_visibles_permitidos(){

        $usuario = (new adm_usuario(link: $this->link))->usuario_activo();
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al al obtener usuario activo',data:  $usuario);
        }

        $filtro['adm_grupo.id'] = $usuario['adm_grupo_id'];
        $filtro['adm_accion.es_lista'] = 'inactivo';
        $filtro['adm_accion.es_status'] = 'inactivo';
        $filtro['adm_accion.visible'] = 'activo';

        $group_by = array('adm_menu.id');

        $columnas_by_table = array('adm_menu');
        $resultado = (new adm_accion_grupo($this->link))->filtro_and(
            columnas_by_table: $columnas_by_table, filtro: $filtro, group_by: $group_by);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al generar menus visibles permitidos',data:  $resultado);
        }

        return $resultado->registros;

    }

    /**
     * Obtiene las secciones de un menu
     * @param int $adm_menu_id Menu identificador
     * @return array
     * @version 0.545.51
     */
    public function secciones(int $adm_menu_id): array
    {
        if($adm_menu_id <= 0){
            return $this->error->error(mensaje: 'Error adm_menu_id debe ser mayor a 0',data:  $adm_menu_id);
        }
        $filtro['adm_menu.id'] = $adm_menu_id;
        $r_adm_seccion = (new adm_seccion($this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener secciones',data:  $r_adm_seccion);
        }
        return $r_adm_seccion->registros;
    }


}